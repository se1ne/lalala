#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile, Font


ev3 = EV3Brick()


ev3.speaker.beep()


left_motor = Motor(Port.B) #левый мотор
right_motor = Motor(Port.C) #правый
center_motor = Motor(Port.A) #центральный
center1_motor = Motor(Port.D) #еще один

Lcolor = ColorSensor(Port.S1) # левый колор 
Rcolor = ColorSensor(Port.S4)
Mcolor = ColorSensor(Port.S3)

Usensor = UltrasonicSensor(Port.S2)


robot = DriveBase(left_motor, right_motor, 55.5, 130)
robot.settings(turn_rate=600,turn_acceleration=300)


white = 100
black = 14
#threshold = (black + white) / 2
grey = black + 5


DRIVE_SPEED = 100
PROPORTIONAL_GAIN = 1.2


tiny_font = Font(size=12)
ev3.screen.set_font(tiny_font)


garages = [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0] # 0 - закрыто, 1 - открыто


list_colors = [0, 0, 0, 0, 0, 0] # 0 - пусто, 1 - красн, 2 - син, 3 - зелен


def start(speed): # выезд на начальный перекресток
    pressed_button()
    robot.turn(45)
    robot.straight(speed)
    robot.turn(45)
    riding_with_stop(speed, 1)
    riding_with_stop(speed, 1)


def cleanGarage(): # Зачистка нижней линии
    scan_1() # сканим
    robot.turn(-90) # разворачиваемся на право
    GetDropCar(0) # забираем красную машинку
    robot.turn(90) # встаем по линии
    riding_with_stop(100, 1) # едем до перекрестка А
    
    robot.turn(90) # все 4 строки для приезда к B0 
    riding_with_stop(100, 1)
    robot.turn(90)
    riding_with_stop(100, 1)
    
    n = 0
    if Usensor.distance() < 120: # Проверка двух кабинок, выгрузка красной, забирание синей и зеленой машинок
        garages[n] = 0
        garages[1] = 1
        garages[2] = 1
        garages[3] = 1
        riding_with_stop(100, 1)
        robot_turn(-90)
        GetDropCar(1)
        robot.turn(90)
        riding_with_stop(100, 1)
        riding_with_stop(100, 1)
    else:
        robot_turn(-90)
        GetDropCar(1)
        robot.turn(90)
        scan_2()
    robot.turn(-90)
    GetDropCar(0) # Забирание синей
    robot.turn(-90)
    riding_with_stop(100, 1)
    robot.turn(-90)
    GetDropCar(3) # Забирание зеленой насквозь
    robot.turn(90)
    riding_with_stop(100, 1)
    riding_with_stop(100, 1)
    riding_with_stop(100, 1) # Приезд на перекресток А


def scan_1(): # Скан нижней линии
    n = 4
    while n < 8:
        riding_with_stop(200, 1)
        if Usensor.distance() < 140:
            #add to list 0
            garages[n] = 0
            ev3.speaker.beep()
        else:
            #add to list 1
            garages[n] = 1 
        n += 1
    robot.turn(180)   
    n = 11
    while n > 7:
        riding_with_stop(200, 1)
        if Usensor.distance() < 140:
            #add to list 0
            garages[n] = 0
            ev3.speaker.beep()
        else:
            #add to list 1
            garages[n] = 1
        n -= 1    
    
    ev3.screen.draw_text(0, 0, garages)
    wait(10000)


def scan_2(): # Скан верхней линии
    n = 0
    while n < 3:
        riding_with_stop(200, 1)
        if Usensor.distance() < 140:
            #add to list 0
            garages[n] = 0
            ev3.speaker.beep()
        else:
            #add to list 1
            garages[n] = 1 
        n += 1


def dropOutside(): # Выгруз синей и зеленой машинок
    riding_with_stop(100, 1)
    riding_with_stop(100, 1) # Проезжаем два перекрестка
    robot.turn(90) # Поворачиваемся вправо
    riding(100, 180, 1) # Доезжаем до перекрестка L 
    robot.turn(-45)
    GetDropCar(2)
    robot.turn(45) # Выгрузили зеленую машинку на М0
    riding_with_stop(100, 1)
    robot.turn(-45)
    GetDropCar(2) # Выгрузили синюю машинку на М1
    robot.turn(-135) # Развернулись
    riding_with_stop(100, 1)
    riding_with_stop(100, 1)
    robot.turn(-90)
    riding_with_stop(100, 1) # Приехали до перекрестка К

    
def riding(speed, distance, kof): # езда по линии на расстояние
    robot.reset()
    distance = distance * -1
    while robot.distance() > distance:
        deviation = Rcolor.reflection() - Lcolor.reflection()
        turn_rate = kof * deviation
        robot.drive(-speed, turn_rate)
    robot.stop()

def till_line(speed):
    robot.reset()
    while robot.distance() > -20:
        robot.drive(speed,0)
    robot.stop()

def riding_stop(speed, kof):
    while True:
        deviation = Lcolor.reflection() - Rcolor.reflection()
        turn_rate = kof * - deviation
        robot.drive(-speed, turn_rate)
        if Rcolor.reflection() < grey or Lcolor.reflection() < grey: # !!!!!!!
            #robot.straight(-10)
            break
    speed = speed / 2
    till_line(-speed)
    robot.stop()

def riding_with_stop(speed, kof): # езда по линии до перекрестка
    mm = 250
    riding(speed, mm, kof)
    riding_stop(speed, 0.8)
    




def open(): # открывает ковш
    center_motor.run_time(400, 500)


def open1():
    center1_motor.run_time(-400, 500)


def close(): # закрывает ковш
    center_motor.run_time(-400, 500)


def close1():
    center1_motor.run_time(400, 500)


def LineCar(a): # забирает машины из линии
    robot.turn(-90)
    if a == 0:
        open()
        robot.reset()
        robot.straight(200)
        WhatAColor()
        robot.straight(100)
        WhatAColor()
        robot.straight(50)
        close()
        robot.straight(-robot.distance())
    elif a == 1:
        open()
        robot.reset()
        robot.straight(400)
        WhatAColor()
        robot.straight(120)
        WhatAColor()
        robot.straight(50)
        close()
        robot.straight(-robot.distance())
        WhatAColor()
    elif a == 2:
        open()
        robot.reset()
        robot.straight(640)
        WhatAColor()
        robot.straight(100)
        WhatAColor()
        robot.straight(50)
        close()
        robot.straight(-robot.distance())
        WhatAColor()
    robot.turn(90)
    riding_with_stop(100, 1)
    

def WhatAColor(): # определяем цвет машинок которые взяли
    n = 0
    color = Mcolor.color()
    if color == Color.RED:
        list_colors[n] = 1
    elif color == Color.BLUE:
        list_colors[n] = 2
    elif color == Color.GREEN:
        list_colors[n] = 3
    n += 1


def GetDropCar(a): # забирает/ставит машины из/в гараж
    if a == 0:
        open()
        riding(100, 100, 1)
        close()
        robot.straight(100)
    elif a == 1:
        riding(100, 100, 1)
        robot.stop()
        open()
        robot.straight(50)
        close()
        robot.straight(50)
    elif a == 2:
        riding(100, 250, 1)
        robot.stop()
        open()
        robot.straight(50)
        close()
        robot.straight(200)
    elif a == 3:
        open()
        riding(100, 75, 1)
        close()
        riding(-100, 125, 1)


def go_to_cross(a, b, c, speed, kof):
    if a == 0:
        robot.turn(90)
        riding_with_stop(speed, kof)
        robot.turn(-90)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-90)
                robot.turn(-90)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()
    elif a == 1:
        robot.turn(90)
        riding_with_stop(speed, kof)
        robot.turn(-90)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()
    
    elif a == 2:
        robot.turn(90)
        riding_with_stop(speed, kof)
        robot.turn(-90)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()

    elif a == 3:
        robot.turn(90)
        riding_with_stop(speed, kof)
        robot.turn(-90)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(90)
                riding_with_stop(speed, kof)
                robot.turn(90)
            elif c == 1:
                robot.stop()

    elif a == 4:
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()

    elif a == 5:
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()

    elif a == 6:
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()

    elif a == 7:
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        riding_with_stop(speed, kof)
        if b == 0:
            robot.turn(90)
            GetDropCar(1)
            robot.turn(-90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()
        elif b == 1:
            robot.turn(-90)
            GetDropCar(1)
            robot.turn(90)
            if c == 0:
                robot.turn(-180)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                riding_with_stop(speed, kof)
                robot.turn(180)
            elif c == 1:
                robot.stop()


def go_to_any_cross(n, speed=200, kof=0.8):
    mm = (n - 1) * 300 + 250
    riding(speed, mm, kof)
    riding_with_stop(speed, kof)


def gotoCross(current_cross, current_direction, cross, direction): 
    # cross - перекресток куда едем, 
    # current_cross - где находимся, 
    # direction - куда повернуты

    if cross < 5: # линия куда ехать
        line = 1
    else:
        line = 2

    if current_cross < 5: # линия где мы сейчас
        current_line = 1
    else:
        current_line = 2

    if current_direction != 'none':
        if cross >= current_cross:
            if  line == current_line: # на одной линии
                if current_direction == "left":
                    robot.turn(-90)
                else:
                    robot.turn(90)
            else:
                if current_direction == "left":
                    robot.turn(90)
                else:
                    robot.turn(-90)
        else:
            if current_direction == "left":
                robot.turn(90)
            else:
                robot.turn(-90)

    # мы развернулись в нужную сторону и готовы ехать 
    if line != current_line: 
        if current_direction != 'none':
            if line > current_line:
                go_to_any_cross(current_cross,350)
                robot.turn(90)
                go_to_any_cross(1, 350)
                robot.turn(90)
                cross_N = cross-4
            else:
                cross_N = current_cross - 4         
                go_to_any_cross(cross_N,350)
                robot.turn(-90)
                go_to_any_cross(1,350)
                robot.turn(-90)
                cross_N = cross
        else:
            robot.turn(90)
            go_to_any_cross(1,350)
            robot.turn(-90)
            cross_N = cross
    else:
        if current_direction != 'none':
            cross_N = abs(cross - current_cross)
        else:
            cross_N = cross - 4
    if cross_N:
        go_to_any_cross(cross_N,350)

    if direction == "left":
        robot.turn(90)
    else:
        robot.turn(-90)


def pressed_button():
    while True:
        pressed = Button.CENTER in ev3.buttons.pressed()
        if pressed:
            break
        

def combos():
    if list_colors[0] == 3 and list_colors[1] == 2:
        riding_with_stop(100, 1)
        robot.turn(-90)
        GetDropCar(1)
        if garages[4] == 1:
            robot.turn(180)
            GetDropCar(4)
            robot.turn(90)
            garages[4] = 0

        elif garages[2] == 1:
            robot.turn(90)
            riding_with_stop(100, 1)
            riding_with_stop(100, 1)
            robot.turn(-90)
            riding_with_stop(100, 1)
            GetDropCar(4)
            robot.turn(-90)
            riding_with_stop(100, 1)
            riding_with_stop(100, 1)
            riding_with_stop(100, 1)
            robot.turn(-90)
            riding_with_stop(100, 1)
            robot.turn(-90)
            garages[7] = 0
        

def left90():
    robot.turn(90)

def right90():
    robot.turn(-90)

# go_to_cross(4, 1, 1)
# riding(500, 100, 0.6)
# riding_with_stop(500, 0.3)
# riding(500, 100, 0.6)
# riding_with_stop(500, 0.3)
# robot.turn(90)
# robot.turn(90)
# riding(500, 100, 0.6)
# riding_with_stop(500, 0.3)
# close()
# close1()
# robot.turn(90)
# robot.turn(-90)
# robot.turn(-90)

go_to_cross(1, 0, 0, 250, 0.8)


